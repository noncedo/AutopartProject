@model List<DataAccess.Process>
@{
    ViewBag.Title = "Index";
}



<br />
<h3>Processes</h3>
<br />

<div class=" table-responsive">
    <table class="table table-striped table-hover table-bordered" id="table">

        <thead>
            <tr>
                <th>Name</th>
                <th>Process Id</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @for (int i = 0; i < @Model.Count; i++)
            {
                <tr class=@(Model[i].ProcessId + "_" + i)>
                    <td class=@("name_" + i )>@Model[i].Name</td>
                    <td>@Model[i].ProcessId</td>
                    <td>
                        @Html.ActionLink("View Process Runs", "Index", "ProcessRun", new { ProcessId = Model[i].ProcessId},new { @class="btn btn-secondary"})
                    </td>
                    <td>
                    <input id=@("editBtn_" + i) type="button" value="Edit" onclick="Edit(@Model[i].ProcessId, @i, '@Model[i].Name')" class="btn btn-info" />
                    <input id=@("cancelBtn_" + i) type="button" value="Cancel" onclick="Cancel(@i,@Model[i].ProcessId,'@Model[i].Name')" class="btn btn-outline-info" hidden/>
                    </td>
                    <td><input type="button" value="Delete" onclick="Delete(@Model[i].ProcessId)" class="btn btn-danger" /></td>
                </tr>
            }
        </tbody>
    </table>
</div>
@*@(Html.Kendo().Grid<DataAccess.Process>()
                    .Name("grid")
                    .Columns(columns =>
                    {
                        columns.Bound(e => e.Name);
                        columns.Bound(e => e.ProcessId);
                        columns.Bound(c => c.ProcessId).ClientTemplate(Html.ActionLink("View Process Runs","Index", "ProcessRun", new { ProcessId = "id" }, new { @class = "k-button k-button-icontext" })
                            .ToHtmlString().Replace("id", "#=ProcessId#")).Filterable(false).Sortable(false).Title("").Width(250);
                        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
                    })
                    .Editable(editable => editable.Mode(GridEditMode.InLine).ConfirmDelete("Confirmation").DisplayDeleteConfirmation("Test"))
                    .DataSource(dataSource => dataSource
                        .Custom()
                        .Type("odata-v4")
                        .Schema(schema => schema
                        .Model(m =>
                        {
                            m.Id(t => t.ProcessId);
                            m.Field(t => t.ProcessId).Editable(false);
                            m.Field(t => t.Name);
                        }))
                        .Transport(t =>
                        {
                            t.Read(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "read" } });
                            t.Update(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "update" } });
                            t.Create(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "create" } });
                            t.Destroy(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "destroy" } });
                        }
                        )
                        .PageSize(20)
                        .ServerPaging(true)
                        .ServerSorting(true)
                        .ServerFiltering(true)
                        .ServerGrouping(true)
                    )
                    .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                    .Sortable()
                    .Filterable()
)*@

<script>

     function Edit(processId, index, name) {

        var btnText = $('#editBtn_' + index).val();

         processId = processId + '_' + index;

        if (btnText == 'Edit') {
            $('#cancelBtn_' + index).removeAttr('hidden');
            $('#editBtn_' + index).val('Save');
            //var oldCodeHtml = $('.' + code + ' td.code_' + index).html();
            $('.' + processId + ' td.name_' + index).empty();
            $('.' + processId + ' td.name_' + index).html('<input id="txtName_' + index + '" type="text" value="' + name + '" class="form-control" />');

        }
        else {
            $('#editBtn_' + index).val('Edit');

            var myObj =
            {
                processId: processId.replace('_' + index, ''),
                name: $('#txtName_' + index).val()
            }
            $.post('@Url.Action("Update","Process")', myObj, function (result) {
                if (result.success == true) {
                alert('Updated!');
                    location.reload();
                }
                else
                    alert("error occured")
            });
        }
    }

    function Cancel(index,processId, name) {
        $('#cancelBtn_' + index).attr('hidden', 'hidden');
        $('#editBtn_' + index).val('Edit');

        processId = processId + '_' + index;
        $('.' + processId + ' td.name_' + index).html(name);


    }
    function Delete(processId) {
        $.post('@Url.Action("Delete", "Process")', { processId: processId }, function (result) {
            if (result.success == true) {
                alert("Deleted");
                location.reload();
            }
            else
                alert("error occured")
        })
    }
    function read() {
        var baseUrl = "@Url.Content("~")";
        return baseUrl + "odata/Processes";
    }
    function update(dataItem) {
        var baseUrl = "@Url.Content("~")";
        return baseUrl + "odata/Processes(" + dataItem.ProcessId + ")";
    }
    function create(dataItem) {
        delete dataItem.ProductID;
        var baseUrl = "@Url.Content("~")";
        return baseUrl + "odata/Processes";
    }
    function destroy(dataItem) {
        var baseUrl = "@Url.Content("~")";
        return baseUrl + "odata/Processes(" + dataItem.ProcessId + ")";
    }

    function showDetails(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var processRunURl = "/ProcessRun/Index?ProcessId=" + dataItem.ProcessId;

        var myObject = { ProcessId: dataItem.ProcessId };

        $.ajax({ //Do an ajax post to the controller
            type: 'POST',
            url: '/ProcessRun/Index',
            data: JSON.stringify(myObject),
            contentType: "application/json; charset=utf-8",
            dataType: "json"
        });

    }
</script> 
