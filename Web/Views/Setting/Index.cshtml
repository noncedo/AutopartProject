
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<br />
<h3>Setting </h3>
<br />

@(Html.Kendo().Grid<DataAccess.Setting>()
                .Name("grid")
                .Columns(columns =>
                {
                    columns.Bound(e => e.Key);
                    columns.Bound(e => e.Value);
                    columns.ForeignKey(e => e.ProcessId, (IEnumerable<DataAccess.Process>)ViewData["Processes"], "ProcessId", "Name")
                    .EditorTemplateName("GridForeignKey");

                    columns.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
                })
                .ToolBar(toolbar => toolbar.Create())
                .Editable(editable => editable.Mode(GridEditMode.InLine).ConfirmDelete("Confirmation").DisplayDeleteConfirmation("Test"))
                .DataSource(dataSource => dataSource
                    .Custom()
                    .Type("odata-v4")
                    .Schema(schema => schema
                    .Model(m =>
                    {
                        m.Id(t => t.SettingId);
                        m.Field(t => t.SettingId).Editable(false);
                        m.Field(t => t.ProcessId);
                        m.Field(t => t.Key);
                        m.Field(t => t.Value);
                    }))
                    .Transport(t =>
                    {
                        t.Read(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "read" } });
                        t.Update(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "update" } });
                        t.Create(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "create" } });
                        t.Destroy(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "destroy" } });
                    }
                    )
                    .PageSize(20)
                    .ServerPaging(true)
                    .ServerSorting(true)
                    .ServerFiltering(true)
                )
                .Pageable(pageable => pageable
                    .Refresh(true)
                    .PageSizes(true)
                    .ButtonCount(5))
                .Sortable()
                .Filterable()

)

<script>
        function read() {
            var baseUrl = "@Url.Content("~")";
            return baseUrl + "odata/Settings";
        }
        function update(dataItem) {
            var baseUrl = "@Url.Content("~")";
            return baseUrl + "odata/Settings(" + dataItem.SettingId + ")";
        }
        function create(dataItem) {
            delete dataItem.ProductID;
            var baseUrl = "@Url.Content("~")";
            return baseUrl + "odata/Settings";
        }
        function destroy(dataItem) {
            var baseUrl = "@Url.Content("~")";
            return baseUrl + "odata/Settings(" + dataItem.SettingId + ")";
        }
</script>